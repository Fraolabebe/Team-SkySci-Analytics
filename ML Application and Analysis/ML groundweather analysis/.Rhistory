filter(prop < proportion.threshold)
unique(degenerate.distributions$key)
(degenerate.distributions)
# Identify missing data grouped by machine
incomplete.machines <- as.data.frame(
kaggle.data %>%
group_by(Machine) %>%
mutate(machine_Total = n()) %>%
ungroup() %>%
filter(!complete.cases(.)) %>%
group_by(Machine) %>%
mutate(Missing = n(),
Proportion =  Missing / machine_Total) %>%
ungroup()%>%
select(Machine, Proportion) %>%
distinct() )
incomplete.machines
# Identify missing data grouped by ID
incomplete.ID <- as.data.frame(
kaggle.data %>%
group_by(ID) %>%
mutate(ID_Total = n()) %>%
ungroup() %>%
filter(!complete.cases(.)) %>%
group_by(ID) %>%
mutate(Missing = n(),
Proportion =  Missing / ID_Total) %>%
ungroup()%>%
select(ID, Proportion) %>%
distinct() )
incomplete.ID
# Missing Records Identifier
library(stringr)
kaggle.data %>%
summarise_all(list(~is.na(.)))%>%
pivot_longer(everything(), names_to = "variables", values_to="missing") %>%
count(variables, missing) %>%
mutate(variables = str_wrap(variables, width = 20)) %>%
ggplot(aes(y = variables, x=n, fill = missing))+
geom_col(position = position_dodge(width = 0.5)) +
labs(title = "Proportion of Missing Attributes",
x = "Proportion") +
scale_fill_manual(values=c("forestgreen","red")) +
theme(axis.text.y = element_text(size = 8))
# Which attributes are missing?
attributes.na <- colSums(is.na(kaggle.data))
attributes.na
class_table <- table(kaggle.data$Machine[kaggle.data$Machine %in% incomplete.machines$Machine])
class_table[class_table > 0]
sum(class_table)
total.na <- sum(is.na(kaggle.data))
print(paste("The total number of na values is: ", total.na))
attributes.na <- colSums(is.na(kaggle.data))
attributes.na
percentage.na <- round(100 * attributes.na / total.na, 1)
paste(names(percentage.na), ": ", percentage.na, "%", sep="")
unique(kaggle.data$X)
View(filter(kaggle.data, X == 0)
)
library(ggplot2)
ggplot(kaggle.data, aes(x=SizeOfCode)) +
geom_histogram(binwidth=100000, fill="cornflowerblue", color="white")
#labs(title="Size of Code Distribution", x="Size of Code", y="Count")
# corrplot
num_vars <- kaggle.data[sapply(kaggle.data, is.numeric)]
corr_matrix <- cor(num_vars)
corrplot(corr_matrix)
# ==============================================================================
# ggcorrplot test
library(ggplot2)
library(ggcorrplot)
# Subset numeric variables from kaggle.data
num_vars <- kaggle.data[sapply(kaggle.data, is.numeric)]
# Calculate correlation matrix and replace missing/invalid values with zeros
corr_matrix <- cor(num_vars, use = "pairwise.complete.obs")
corr_matrix[is.na(corr_matrix) | is.infinite(corr_matrix)] <- 0
# Create ggcorrplot with larger space between attribute labels
ggcorrplot(corr_matrix, hc.order = TRUE,
ggtext = ggplot2::element_text(size = 8, hjust = 0.5, margin = margin(t = 0, b = 5)))
ggcorrplot(corr_matrix, hc.order = TRUE)
# ==============================================================================
# ==============================================================================
library(ggplot2)
# Subset numeric variables from kaggle.data
num_vars <- kaggle.data[sapply(kaggle.data, is.numeric)]
# Calculate correlation matrix and replace missing/invalid values with zeros
corr_matrix <- cor(num_vars, use = "pairwise.complete.obs")
corr_matrix[is.na(corr_matrix) | is.infinite(corr_matrix)] <- 0
# Convert correlation matrix to dataframe
df <- reshape2::melt(corr_matrix)
# Create heatmap with coral shade for negative correlations and black box borders
ggplot(df, aes(Var1, Var2, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "coral", mid = "white", high = "steelblue",
midpoint = 0, limits = c(-1,1), guide = "colorbar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Malware Data Variable Correlation Heatmap", x = "Variable 1", y = "Variable 2") +
geom_rect(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, fill = NA, color = "black")
# ==============================================================================
# Metadata Plots
# Load dataset
# Get number of columns for each data type
num_numeric <- sum(sapply(kaggle.data, is.numeric))
num_factor <- sum(sapply(kaggle.data, is.factor))
num_character <- sum(sapply(kaggle.data, is.character))
num_logical <- sum(sapply(kaggle.data, is.logical))
# Create bar plot
barplot(
c(num_numeric, num_factor, num_character, num_logical),
names.arg = c("Numeric", "Factor", "Character", "Logical"),
xlab = "Data Types",
ylab = "Number of Columns",
main = "Data Types in kaggle.data"
)
library(ggplot2)
# Get number of columns for each data type
num_numeric <- sum(sapply(kaggle.data, is.numeric))
num_factor <- sum(sapply(kaggle.data, is.factor))
num_character <- sum(sapply(kaggle.data, is.character))
num_logical <- sum(sapply(kaggle.data, is.logical))
# Create data frame for bar plot
data <- data.frame(
Data_Types = c("Numeric", "Factor", "Character", "Logical"),
Number_of_Columns = c(num_numeric, num_factor, num_character, num_logical)
)
# Sort the data frame by Number_of_Columns in descending order
data <- data[order(-data$Number_of_Columns), ]
# Create the ggplot bar plot
ggplot(data, aes(x = reorder(Data_Types, Number_of_Columns), y = Number_of_Columns, fill = Data_Types)) +
geom_bar(stat = "identity", color="black") +
geom_text(aes(label = Number_of_Columns), hjust = -0.5, vjust=-0.5, color = "black") +
coord_flip() +
labs(x = "Data Types", y = "Number of Attributes",
title = "Data Types in Malware Classifier Data") +
theme(legend.position = "bottom")
# Basic violin plot
library(ggplot2)
p <- ggplot(kaggle.data, aes(x=SizeOfCode, y=SectionsMeanEntropy)) +
geom_violin()
p
# Rotate the violin plot
p + coord_flip()
# Set trim argument to FALSE
ggplot(kaggle.data, aes(x=x.var, y=y.var)) +
geom_violin(trim=FALSE)
# Install required packages if not already installed
install.packages("rvest")
# Load the required libraries
library(rvest)
# Create an empty data frame to store the scraped data
scrapedData <- data.frame()
# Define the URL pattern for the desired date range
baseURL <- "https://www.wunderground.com/history/daily/us/va/sterling/KIAD/date/"
# Loop through the date range and scrape the data
startDate <- as.Date("2022-09-01")
endDate <- as.Date("2022-12-31")
for (date in seq(startDate, endDate, by = "days")) {
# Construct the URL for the current date
url <- paste0(baseURL, format(date, "%Y-%m-%d"))
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table containing the Daily Observations
table <- html_table(html_nodes(webpage, "table.observations_details"))[[1]]
# Append the scraped data to the existing data frame
scrapedData <- rbind(scrapedData, table)
}
# Print the scraped data
print(scrapedData)
baseURL
startDate
endDate
for (date in seq(startDate, endDate, by = "days")) {
# Construct the URL for the current date
url <- paste0(baseURL, format(date, "%Y-%m-%d"))
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table containing the Daily Observations
table <- html_table(html_nodes(webpage, "table.observations_details"))[[1]]
# Append the scraped data to the existing data frame
scrapedData <- rbind(scrapedData, table)
}
table
# Extract the table containing the Daily Observations
table <- html_table(html_nodes(webpage, "table.observations_details"))[[1]]
# Fit the logistic regression model
model <- glm(Image ~ ., data = df, family = "binomial")
# Load required libraries
library(dplyr)
library(tidyr)
library(readr)
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ",getwd()), sep="\n")
# Load the dataset
dataset <- read_csv("ground_weather_merged.csv")
# rename Image Present to Image
# Check the current column names in the dataframe
column_names <- names(dataset)
column_names
# Rename the "Image Present" column to "Image"
new_column_names <- ifelse(column_names == "Image Present", "Image", column_names)
# Update the dataframe with the new column names
names(dataset) <- new_column_names
names(dataset)
# Data preprocessing
# Remove any unnecessary columns
df <- select(dataset, -"Datetime",
-"precp",
-"Wind",
-"wspd",
-"dewPt",
#-"Image Present",
-"Low/Mid Clouds (%)",
-"High Cirrus (%)",
-"Long-lived Contrails (Count)",
-"Contrail-Cirrus (Count)",
-"Day Low/Mid",
-"Day Count Cirrs",
-"Day Count Cont LL",
-"Day Count Cont-Cirrus")
# Handle missing values
df <- na.omit(df)
# Split the dataset into predictors (X) and the target variable (y)
target_variable_column <- "Image"
X <- select(df, -target_variable_column)
y <- select(df, target_variable_column)
dim(X)[1] == dim(y)[1]
# Perform any additional data preprocessing steps as needed
# For example, scaling/standardizing variables, creating dummy variables, etc.
# Split the dataset into training and testing sets
set.seed(123)  # Set a random seed for reproducibility
train_indices <- sample(nrow(df), nrow(df) * 0.7)  # 70% for training
train_data <- X[train_indices, ]
test_data <- y[-train_indices, ]
#------------------------
model <- glm(Image ~ ., data = df, family = "binomial")
# Make predictions on the test data
predictions <- predict(model, newdata = df, type = "response")
# Evaluate the model (example: using accuracy)
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
accuracy <- sum(predicted_classes == df$Image) / length(df$Image)
cat("Accuracy:", accuracy)
#------------------------
# Create a confusion matrix below
#------------------------
# Install the "caret" package if it's not already installed
# install.packages("caret")
# Load the required libraries
library(caret)
# Make predictions on the test data
predictions <- predict(model, newdata = df, type = "response")
# Convert predicted_classes and df$Image to factors with the same levels
predicted_classes <- factor(ifelse(predictions > 0.5, 1, 0))
df$Image <- factor(df$Image)
# Create the confusion matrix
confusion_matrix <- confusionMatrix(predicted_classes, df$Image)
# Print the confusion matrix
confusion_matrix
#-------------------------------------------------------------------------------
# VISUALIZATIONS
#-------------------------------------------------------------------------------
# Default Visual
library(pROC)
roc_obj <- roc(df$Image, predictions)
plot(roc_obj, main = "Receiver Operating Characteristic (ROC) Curve")
pr_obj <- roc(df$Image, predictions, direction = "<")
plot(pr_obj, main = "Precision-Recall Curve")
# Error: Unable to load package rms on my linux box
install.packages("rms")
library(rms)
calibration_plot <- calibration(predictions, df$Image, method = "bins")
plot(calibration_plot, main = "Calibration Plot")
#-------------------------------------------------------------------------------
# ggPlot  Visual
library(pROC)
library(ggplot2)
# ROC Curve
roc_obj <- roc(df$Image, predictions)
roc_data <- data.frame(
"FPR" = roc_obj$specificities,
"TPR" = roc_obj$sensitivities
)
roc_plot <- ggplot(roc_data, aes(x = FPR, y = TPR)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(x = "False Positive Rate", y = "True Positive Rate") +
ggtitle("Receiver Operating Characteristic (ROC) Curve")
roc_plot
#========================================
# Precision Recall Visualization
# Precision: measures the accuracy of positive predictions made by a model
# Precision = True Positives / (True Positives + False Positives)
# Recall: measures ability of a model to identify positive instances correctly
# Recall = True Positives / (True Positives + False Negatives)
#========================================
pr_obj <- roc(df$Image, predictions, direction = "<")
# Calculate Precision
pr_data <- data.frame(
"Recall" = pr_obj$sensitivities,
"Specificity" = pr_obj$specificities
)
pr_data$Precision <- with(pr_data, Recall / (Recall + (1 - Specificity)))
# Filter out rows with missing values
pr_data <- pr_data[complete.cases(pr_data), ]
pr_plot <- ggplot(pr_data, aes(x = Recall, y = Precision)) +
geom_line() +
labs(x = "Recall", y = "Precision") +
ggtitle("Precision-Recall Curve")
pr_plot
# Heatmap of Original Dataset w/targeted attributes
library(ggplot2)
# Calculate correlation matrix
numeric_df <- df[, sapply(df, is.numeric)]
cor_matrix <- cor(numeric_df)
# Convert correlation matrix to long format
cor_data <- reshape2::melt(cor_matrix)
# Create correlation heatmap using ggplot2
heatmap_plot <- ggplot(cor_data, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "Variable 1", y = "Variable 2", title = "Correlation Heatmap") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3)
heatmap_plot
#===============================================================================
# Display Outputs
#===============================================================================
heatmap_plot
confusion_matrix
roc_plot
pr_plot
#===============================================================================
# Fit the logistic regression model
model <- glm(Image ~ ., data = df, family = "binomial")
# Get the coefficients
coefficients <- coef(model)
# Sort the coefficients by their absolute values to get the ranking
sorted_coefficients <- sort(abs(coefficients), decreasing = TRUE)
# Print the ranking
print(sorted_coefficients)
sorted_coefficients
r
# Print the ranking
# Variables with larger absolute coefficients have a stronger influence
# on the prediction
print(sorted_coefficients)
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
coef_data <- data.frame(Variable = names(coefficients), Coefficient = coefficients)
# Sort the coefficients by their absolute values for easier interpretation
coef_data <- coef_data[order(abs(coef_data$Coefficient), decreasing = TRUE), ]
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
coef_data <- data.frame(Variable = names(coefficients), Coefficient = coefficients)
# Sort the coefficients by their absolute values for easier interpretation
coef_data <- coef_data[order(abs(coef_data$Coefficient), decreasing = TRUE), ]
# Create the bar plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients (No Intercept)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
# Create the bar plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients (No Intercept)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
# Create the bar plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient[2:], fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients (No Intercept)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
coef_data
# Sort the coefficients by their absolute values for easier interpretation
coef_data <- coef_data[order(abs(coef_data$Coefficient), decreasing = TRUE), 2:]
coef_data[2:]
coef_data[][2:]
coef_data[][2]
coef_data[][1]
coef_data
coefficients
model
sorted_coefficients <- sort(abs(coefficients), decreasing = TRUE)
sorted_coefficients
sorted_coefficients[-1]
# Remove the intercept coefficient
predictor_coef <- sorted_coefficients[-1]
coef_data <- data.frame(Variable = names(coefficients), Coefficient = coefficients)
# Sort the coefficients by their absolute values for easier interpretation
coef_data <- coef_data[order(abs(coef_data$Coefficient), decreasing = TRUE), ]
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
coef_data
predictor_coef
coef_data <- data.frame(Variable = names(predictor_coef), Coefficient = coefficients)
coefficients
coef_data <- data.frame(Variable = names(predictor_coef), Coefficient = predictor_coef)
# Sort the coefficients by their absolute values for easier interpretation
coef_data <- coef_data[order(abs(coef_data$Coefficient), decreasing = TRUE), ]
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Negative", "Positive"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(-1.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "blue"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("green", "brickred"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("forestgreen", "coral"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("coral", "forestgreen"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Variable", y = "Coefficient Magnitude", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("coral", "forestgreen"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Predictor Variable", y = "Coefficient Magnitude", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("coral", "forestgreen"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Predictor Variable", y = "Coefficient Magnitude", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("coral", "forestgreen"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0)) +
coord_flip()
# Display the bar plot
coef_plot
coef_plot <- ggplot(coef_data, aes(x = Variable, y = Coefficient, fill = Coefficient > 0.4999)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Predictor Variable", y = "Coefficient Magnitude", title = "Comparison of Coefficients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("coral", "forestgreen"), labels = c("Minority", "Majority"), guide = guide_legend(reverse = TRUE)) +
coord_cartesian(ylim = c(0.0, 1.0))
# Display the bar plot
coef_plot
