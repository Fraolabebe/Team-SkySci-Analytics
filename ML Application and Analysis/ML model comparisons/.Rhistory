#-------------------------------------------------------------------------------
df <- read_csv("cross_model_comparison.xlsx")
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
{
{
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
#-------------------------------------------------------------------------------
df <- read_csv("cross_model_comparison.xlsx")
#plot.subtitle <- "Atmospheric Weather Data (20KM)"
levels_interested <- c(200, 225, 250, 275, 300)
}
df
}
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
{
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
#-------------------------------------------------------------------------------
df <- read_csv("cross_model_comparison.xlsx")
#plot.subtitle <- "Atmospheric Weather Data (20KM)"
levels_interested <- c(200, 225, 250, 275, 300)
}
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rstudioapi::getSourceEditorContext()$path
setwd("C:/Dev/Team-SkySci-Analytics/ML Application and Analysis/ML model comparisons")
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
df
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
df
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
df
colnames(df)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Barplot
barplot_height <- rbind(df$Accuracy, df$Kappa)
barplot(barplot_height, beside = TRUE, col = c("blue", "green"),
ylim = c(0, 1.0), xlab = "Model", ylab = "Scores",
names.arg = df$Model, legend.text = c("Accuracy", "Kappa"))
# Add labels on top of the bars
for (i in 1:nrow(df)) {
text(x = barplot_height[, i] + 0.25, y = barplot_height[, i],
labels = paste(" ", barplot_height[, i]), pos = 3)
}
# Add a legend
legend("topright", legend = c("Accuracy", "Kappa"), col = c("blue", "green"), pch = 15)
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Reshape the data in a tidy format
library(tidyr)
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
library(ggplot2)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Reshape the data in a tidy format
library(tidyr)
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
colnames(df)
# Create the ggplot barplot
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "ï..Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot
ggplot(df_tidy, aes(x = ï..Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "ï..Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
colnames(df)
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
colnames(df)
# Rename the ï..Model column to Model
colnames(df)[colnames(df) == "ï..Model"] <- "Model"
colnames(df)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Sort the data based on descending Kappa values
df <- df %>% arrange(desc(Kappa))
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot with ordered bars
ggplot(df_tidy, aes(x = factor(Model, levels = Model), y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot with ordered bars
ggplot(df_tidy, aes(x = factor(Model, levels = Model), y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot with ordered bars
ggplot(df_tidy, aes(x = interaction(Model, Metric, sep = "_"), y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot with ordered bars
ggplot(df_tidy, aes(x = factor(Model, levels = Model), y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
colnames(df)
# Rename the ï..Model column to Model
colnames(df)[colnames(df) == "ï..Model"] <- "Model"
colnames(df)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Sort the data based on descending Kappa values while maintaining the order of Accuracy
library(dplyr)
df <- df %>%
arrange(desc(Kappa), desc(Accuracy))
# Reshape the data in a tidy format
library(tidyr)
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot with ordered bars
library(ggplot2)
ggplot(df_tidy, aes(x = factor(Model, levels = Model), y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
ggplot(df_tidy, aes(x = factor(Model, levels = Model), y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
df_tidy
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("blue", "green"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("blue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("cyan", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("blue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color="black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Function to print citation for a package
print_package_citation <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
citation(package_name)
} else {
cat(paste0("Package '", package_name, "' not installed.\n"))
}
}
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
print_package_citation(package)
}
packages
df
print_package_citation
# Function to print citation for a package
print_package_citation <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
citation(package_name)
} else {
cat(paste0("Package '", package_name, "' not installed.\n"))
}
}
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
print_package_citation(package)
}
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
citation(package)
}
cat("Citation for package '", package, "':\n")
citation(package)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
citation(package)
}
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
citation(package)
}
package
packages
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
pkg_citation <- citation(package)
print(pkg_citation)
}
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
pkg_citation <- citation(package)
print(pkg_citation)
}
#===============================================================================
# Create a list of citations
citations_list <- list(
"Citation for package ' rNOMADS ': ...",
"Citation for package ' tidyr ': ...",
"Citation for package ' dplyr ': ...",
"Citation for package ' class ': ...",
"Citation for package ' ggplot2 ': ...",
"Citation for package ' readr ': ...",
"Citation for package ' stringr ': ...",
"Citation for package ' cluster ': ...",
"Citation for package ' factoextra ': ...",
"Citation for package ' pROC ': ...",
"Citation for package ' rms ': ...",
"Citation for package ' caret ': ...",
"Citation for package ' ROCR ': ...",
"Citation for package ' e1071 ': ..."
)
# Extract package names from citations
package_names <- sub(".*package '(.*?)'.*", "\\1", citations_list)
# Sort citations alphabetically by package name
sorted_citations <- citations_list[order(package_names)]
# Print citations in APA order
for (citation_text in sorted_citations) {
cat("\n---------------------------------------------\n")
cat(citation_text)
}
cat(citation_text)
# List of R packages
packages <- c(
"rNOMADS", "tidyr", "dplyr", "class", "ggplot2",
"readr", "stringr", "cluster", "factoextra", "pROC",
"rms", "caret", "ROCR", "e1071"
)
# Print citations for each package
for (package in packages) {
cat("\n---------------------------------------------\n")
cat("Citation for package '", package, "':\n")
pkg_citation <- citation(package)
print(pkg_citation)
}
#===============================================================================
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color="black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
colnames(df)
# Rename the ï..Model column to Model
colnames(df)[colnames(df) == "ï..Model"] <- "Model"
colnames(df)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Sort the data based on descending Kappa values while maintaining the order of Accuracy
library(dplyr)
df <- df %>%
arrange(desc(Kappa), desc(Accuracy))
# Reshape the data in a tidy format
library(tidyr)
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color="black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
