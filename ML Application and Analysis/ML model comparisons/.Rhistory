geom_line() +  # Add lines for each level series
geom_point(shape = NA) +  # Hide all scatter points
labs(x = "Timestamp", y = "Relative Temperature (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
{
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Temperature for all of time at all pressure levels
title.var <- "Relative Temperature through Time for all Pressure Levels"
# Create the ggplot line plot
ggplot(df, aes(x = Timestamp, y = Temperature, color = as.factor(Level))) +
geom_line() +  # Add lines for each level series
geom_point(shape = NA) +  # Hide all scatter points
labs(x = "Timestamp", y = "Relative Temperature (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for all of time at pressure levels (200 - 250)
{
title.var <- "Temperature through Time for Pressure Levels from 200 to 250"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values between 200 and 250
df_filtered <- subset(df, Level >= 200 & Level <= 250)
# Create the ggplot scatter plot
ggplot(df_filtered, aes(x = Timestamp, y = Temperature, color = as.factor(Level))) +
geom_line() +
geom_point(size=0.35) +
labs(x = "Timestamp", y = "Temperature (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for all of time at pressure levels (200)
{
title.var <- "Temperature through Time for Pressure Level 200"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values 200
df_filtered <- subset(df, Level == 200)
# Create the ggplot scatter plot
ggplot(df_filtered, aes(x = Timestamp, y = Temperature, color = as.factor(Level))) +
geom_point(size=0.75) +
labs(x = "Timestamp", y = "Temperature (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for all of time at pressure levels (225)
{
title.var <- "Temperature through Time for Pressure Level 225"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values 225
df_filtered <- subset(df, Level == 225)
# Set the common color for level 225 (blue)
common_color <- "#619CFF"
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_filtered, aes(x = Timestamp, y = Temperature, color = as.factor(Level))) +
geom_point(size=0.75) +
labs(x = "Timestamp", y = "Temperature (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
scale_color_manual(values = common_color) +  # Set the common color for level 225
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for all of time at pressure levels (250)
{
title.var <- "Temperature through Time for Pressure Level 250"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values 250
df_filtered <- subset(df, Level == 250)
# Set the common color for level 225 (blue)
common_color <- "#00BA38"
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_filtered, aes(x = Timestamp, y = Temperature, color = as.factor(Level))) +
geom_point(size=0.75) +
labs(x = "Timestamp", y = "Temperature (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
scale_color_manual(values = common_color) +  # Set the common color for level 225
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for September time at pressure levels (225)
{
title.var <- "Temperature through Time for Pressure Level 225"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Sept 30th 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values 225
df_filtered <- subset(df, Level == 225)
# Set the common color for level 225 (blue)
common_color <- monthly.color[1]
# Filter the dataframe to include only data for September
df_september <- subset(df_filtered, format(Timestamp, "%m") == "09")
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_september, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_september, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
geom_line(color = common_color, size = 0.2) +  # Add a line connecting the first and last data points
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for October time at pressure levels (225)
{
title.var <- "Temperature through Time for Pressure Level 225"
subtitle.var <- "NOAA RAP (20KM) Oct 1st 2022 - Oct 31st 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values between 200 and 225
df_filtered <- subset(df, Level == 225)
# Set the common color for level 225 (blue)
common_color <- monthly.color[2]
# Filter the dataframe to include only data for October
df_october <- subset(df_filtered, format(Timestamp, "%m") == "10")
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_october, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_october, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
geom_line(color = common_color, size = 0.2) +  # Add a line connecting the first and last data points
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for November time at pressure levels (225)
{
title.var <- "Temperature through Time for Pressure Level 225"
subtitle.var <- "NOAA RAP (20KM) Nov 1st 2022 - Nov 30th 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values 225
df_filtered <- subset(df, Level == 225)
# Set the common color for level 225 (blue)
common_color <- monthly.color[3]
# Filter the dataframe to include only data for November
df_november <- subset(df_filtered, format(Timestamp, "%m") == "11")
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_november, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_november, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
geom_line(color = common_color, size = 0.2) +  # Add a line connecting the first and last data points
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#-------------------------------------------------------------------------------
# Temperature for December time at pressure levels (225)
{
title.var <- "Temperature through Time for Pressure Level 225"
subtitle.var <- "NOAA RAP (20KM) Dec 1st 2022 - Dec 22nd 2022 { 225 mb ~ approx 36,000 feet}"
# Convert the "Timestamp" column to a proper date-time format
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Filter the dataframe to include only Level values 225
df_filtered <- subset(df, Level == 225)
# Set the common color for level 225 (blue)
common_color <- monthly.color[4]
# Filter the dataframe to include only data for December
df_december <- subset(df_filtered, format(Timestamp, "%m") == "12")
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_december, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot and use scale_color_manual to set the common color
ggplot(df_december, aes(x = Timestamp, y = Temperature)) +
geom_point(color = common_color) +
geom_line(color = common_color, size = 0.2) +  # Add a line connecting the first and last data points
labs(x = "Timestamp", y = "Temperature (%)",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
colnames(df)
#===============================================================================
# Misc. Visuals
#===============================================================================
# Humidity versus Temperature colored by Level
{
title.var <- "Humidity versus Temperature by Level"
# Create the ggplot scatter plot
ggplot(df, aes(x = Temperature, y = Humidity, color = as.factor(Level))) +
geom_point() +
labs(x = "Temperature (%)", y = "Relative Humidity (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
#===============================================================================
# Misc. Visuals
#===============================================================================
# Humidity versus Temperature colored by Level
{
title.var <- "Humidity versus Temperature by Level"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022"
# Create the ggplot scatter plot
ggplot(df, aes(x = Temperature, y = Humidity, color = as.factor(Level))) +
geom_point() +
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
}
df
colnames(df)
#-------------------------------------------------------------------------------
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Testing theory
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
#-------------------------------------------------------------------------------
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("C:/Dev/Team-SkySci-Analytics/ML Application and Analysis/ML atmospheric analysis")
print(paste("Current Working Directory: ", getwd()), sep = "\n")
#-------------------------------------------------------------------------------
# Load Dataset
df <- read_csv("atmospheric_weather_preprocessed.csv")
plot.subtitle <- "Atmospheric Weather Data (20KM)"
#-------------------------------------------------------------------------------
# Load Dataset
df <- read_csv("atmospheric_weather_preprocessed.csv")
plot.subtitle <- "Atmospheric Weather Data (20KM)"
title.var <- "Humidity versus Temperature by Level"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022"
colnames(df)
# Create the ggplot scatter plot
ggplot(df, aes(x = Temperature, y = Humidity, color = as.factor(Level))) +
geom_point() +
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot
ggplot(df, aes(x = temperature, y = humidity, color = as.factor(Level))) +
geom_point() +
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot
ggplot(df, aes(x = temperature, y = humidity, color = as.factor(image))) +
geom_point() +
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot
ggplot(df, aes(x = Temperature, y = Humidity, color = as.factor(Level))) +
geom_point(alpha = 0.4) +  # Set the opacity of points to 0.4
labs(x = "Temperature (%)", y = "Relative Humidity (%)", color = "Level",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot
ggplot(df, aes(x = temperature, y = humidity, color = as.factor(image))) +
geom_point(alpha=0.4) +
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Create the ggplot scatter plot
ggplot(df, aes(x = temperature, y = humidity, color = as.factor(image))) +
geom_point(aes(alpha = as.factor(image)), size = 3) +  # Set the size of points
scale_alpha_manual(values = c(0.4, 1.0)) +  # Set alpha values for each level of "image"
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
title.var <- "Humidity versus Temperature by Level"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022"
# Create the ggplot scatter plot
ggplot(df, aes(x = temperature, y = humidity, color = as.factor(image))) +
geom_point(aes(alpha = as.factor(image)), size = 1) +  # Set the size of points
scale_alpha_manual(values = c(0.2, 1.0)) +  # Set alpha values for each level of "image"
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
title.var <- "Humidity versus Temperature by Contrail Presence"
subtitle.var <- "NOAA RAP (20KM) Sept 1st 2022 - Dec 22nd 2022"
# Create the ggplot scatter plot
ggplot(df, aes(x = temperature, y = humidity, color = as.factor(image))) +
geom_point(aes(alpha = as.factor(image)), size = 1) +  # Set the size of points
scale_alpha_manual(values = c(0.2, 1.0)) +  # Set alpha values for each level of "image"
labs(x = "Temperature (K)", y = "Relative Humidity (%)", color = "image",
title = title.var, subtitle = subtitle.var) +
theme_minimal()
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
colnames(df)
# Rename the ï..Model column to Model
colnames(df)[colnames(df) == "ï..Model"] <- "Model"
colnames(df)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
# Sort the data based on descending Kappa values while maintaining the order of Accuracy
library(dplyr)
df <- df %>%
arrange(desc(Kappa), desc(Accuracy))
# Reshape the data in a tidy format
library(tidyr)
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color="black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
colnames(df)
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
df_tidy
ggplot(df, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa, PPV), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot without ordering the bars
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color="black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title="Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle="Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
theme_minimal()
ggplot(df, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
coord_flip() +
theme_minimal()
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
# Load required library
library(dplyr)
library(tidyr)
library(readr)
library(class)
library(ggplot2)
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
# Load the CSV file into a dataframe
df <- read.csv("cross_model_comparison.csv")
colnames(df)
# Rename the ï..Model column to Model
colnames(df)[colnames(df) == "ï..Model"] <- "Model"
colnames(df)
# Round the accuracy and kappa scores to three decimals
df$Accuracy <- round(df$Accuracy, 3)
df$Kappa <- round(df$Kappa, 3)
df$PPV <- round(df$PPV, 3)
# Sort the data based on descending Kappa values while maintaining the order of Accuracy
library(dplyr)
df <- df %>%
arrange(desc(Kappa), desc(Accuracy))
# Reshape the data in a tidy format
library(tidyr)
df_tidy <- df %>% pivot_longer(cols = c(Accuracy, Kappa, PPV), names_to = "Metric", values_to = "Score")
# Create the ggplot barplot without ordering the bars
# ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
#   geom_bar(stat = "identity", position = "dodge", color="black", width = 0.7) +
#   geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
#   labs(x = "Model", y = "Scores", fill = "Metric",
#        title="Cross Model Comparisons of Accuracy & Kappa Metrics",
#        subtitle="Level=225mb boosted with Contrail Present Data") +
#   scale_fill_manual(values = c("skyblue", "forestgreen"), labels = c("Accuracy", "Kappa")) +
#   theme_minimal()
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy & Kappa Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
ggplot(df_tidy, aes(x = Model, y = Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.7) +
geom_text(aes(label = Score), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Model", y = "Scores", fill = "Metric",
title = "Cross Model Comparisons of Accuracy, Kappa, and PPV Metrics",
subtitle = "Level=225mb boosted with Contrail Present Data") +
scale_fill_manual(values = c("skyblue", "forestgreen", "coral"),
labels = c("Accuracy", "Kappa", "PPV")) +
theme_minimal()
# NOTE: Set to your working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
print(paste("Current Working Directory: ", getwd()), sep = "\n")
#-------------------------------------------------------------------------------
df <- read_csv("atmospheric_weather_preprocessed.csv")
head(df)
unique(df$pressure)
df.200 <- df %>% filter(pressure == 200)
unique(df.200$pressure)
level <- 2250
level.modifier <- 225
plot.subtitle <- paste("Atmospheric Weather Data (Level = ",
level.modifier, "mb and any contrail present)")
plot.subtitle
head(df)
df.all <- df %>%
filter(pressure == level.modifier | (pressure != level.modifier & image == 1))
df.all
unique(df.all$pressure)
level.modifier
level.modifier <- 200
level.modifier <- 225
df.all <- df %>%
filter(pressure == level.modifier | (pressure != level.modifier & image == 1))
level <- 225
df.225 <- df %>% select(-pressure)
head(df.225)
df.225 <- df %>% select(-pressure)
df.225 <- df %>% filter(pressure == 225)
df.225
head(df.225)
head(df.all)
table(df.all$image)
table(df.225$image)
88/2544
sum(table(df.225$image))
sum(table(df.all$image))
1140/sum(table(df.all$image))
df
